service: ofgm-backend

plugins: 
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-plugin-typescript

package:
  individually: true

provider: 
  name: aws
  runtime: nodejs14.x
  region: ${opt:region, "us-east-1"}
  stage: ${opt:stage, "local"}
  timeout: 30
  apiGateway:
    restApiId: !Ref MainApi
    restApiRootResourceId: !GetAtt MainApi.RootResourceId

resources:
  - '${file(./aws/resources/cloudfront.yaml)}'
  - '${file(./aws/resources/dynamodb.yaml)}'
  - '${file(./aws/resources/s3.yaml)}'
  - '${file(./aws/resources/apigateway.yaml)}'

custom:
  defaults: ${file(./defaults.yaml)}
  tags: ${self:custom.defaults.tags}
  environment: ${self:custom.defaults.environment}
  service: ${self:service}
  base: ${self:service}-${self:provider.stage}
  export-env:
    filename: .env
    overwrite: false
    enableOffline: true
  dynamodb:
    stages:
      - local
    start: 
      port: 4000
      inMemory: true
      migrate: true
      seed: true
    seed:
      tables:
        sources:
          - table: ${self:provider.stage}-users
            sources: [./src/seeds/users.json]
          - table: ${self:provider.stage}-concerts
            sources: [./src/seeds/concerts.json]
          - table: ${self:provider.stage}-purchases
            sources: [./src/seeds/purchases.json]
          - table: ${self:provider.stage}-news
            sources: [./src/seeds/news.json]


functions:
  getConcertById:
    name: ${self:custom.base}-getConcertById
    description: 'Retrieves a concert by Id'
    handler: src/handlers/getConcertById.handler
    timeout: 30
    memorySize: 264
    package:
      patterns:
        - ! src/**/*
        - src/helpers/dynamodb.ts
        - src/getConcertById.ts
    environment:
      CONCERTS_TABLE: !Ref concertsTable
    events:
      - http:
         path: /concert/{id}
         method: get
         cors: true 
  