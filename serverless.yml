service: ofgm-backend

plugins: 
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-plugin-typescript
  - serverless-s3-local

package:
  individually: true

provider: 
  name: aws
  runtime: nodejs14.x
  region: ${opt:region, "us-east-1"}
  stage: ${opt:stage, "local"}
  timeout: 30
  environment:
    STAGE: ${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 'arn:aws:dynamodb:us-east-1:*:*'
        - Effect: Allow
          Action: 
            - s3:GetObject
            - s3:PutObject
          Resource: 'arn:aws:dynamodb:us-east-1:*:*'
  apiGateway:
    restApiId: !Ref MainApi
    restApiRootResourceId: !GetAtt MainApi.RootResourceId

resources:
  - '${file(./aws/resources/cloudfront.yaml)}'
  - '${file(./aws/resources/dynamodb.yaml)}'
  - '${file(./aws/resources/s3.yaml)}'
  - '${file(./aws/resources/apigateway.yaml)}'

custom:
  defaults: ${file(./defaults.yaml)}
  tags: ${self:custom.defaults.tags}
  environment: ${self:custom.defaults.environment}
  service: ${self:service}
  base: ${self:service}-${self:provider.stage}
  export-env:
    filename: .env
    overwrite: false
    enableOffline: true
  dynamodb:
    stages:
      - local
    start: 
      port: 4000
      inMemory: true
      migrate: true
      seed: true
    seed:
      tables:
        sources:
          - table: ${self:provider.stage}-users
            sources: [./src/seeds/users.json]
          - table: ${self:provider.stage}-concerts
            sources: [./src/seeds/concerts.json]
          - table: ${self:provider.stage}-tickets
            sources: [./src/seeds/tickets.json]
          - table: ${self:provider.stage}-news
            sources: [./src/seeds/news.json]
  s3:
    host: localhost
    region: us-east-1
    directory: ./.bucket
    port: 3005


functions:
  getConcertById:
    name: ${self:custom.base}-getConcertById
    description: 'Retrieves a concert by Id'
    handler: src/handlers/getConcertById.handler
    timeout: 30
    memorySize: 264
    package:
      patterns:
        - ! src/**/*
        - src/helpers/dynamodb.ts
        - src/getConcertById.ts
    environment:
      CONCERTS_TABLE: ${self:custom.environment.CONCERTS_TABLE}
    events:
      - http:
         path: /concert/{id}
         method: get
         cors: true 
  createConcert:
    name: ${self:custom.base}-createConcert
    description: 'Creates a concert'
    handler: src/handlers/createConcert.handler
    timeout: 30
    memorySize: 264
    package:
      patterns:
        - ! src/**/*
        - src/helpers/dynamodb.ts
        - src/createConcert.ts
    environment:
      CONCERTS_TABLE: ${self:custom.environment.CONCERTS_TABLE}
    events:
      - http:
         path: /concert
         method: post
         cors: true 
  getUpcomingConcerts:
    name: ${self:custom.base}-getUpcomingConcerts
    description: 'Retrieves a concert by Id'
    handler: src/handlers/getUpcomingConcerts.handler
    timeout: 30
    memorySize: 264
    package:
      patterns:
        - ! src/**/*
        - src/helpers/dynamodb.ts
        - src/getUpcomingConcerts.ts
    environment:
      CONCERTS_TABLE: ${self:custom.environment.CONCERTS_TABLE}
    events:
      - http:
         path: /upcomingConcerts
         method: get
         cors: true 
  getConcertsByYear:
    name: ${self:custom.base}-getConcertsByYear
    description: 'Retrieves a concert by Year'
    handler: src/handlers/getConcertsByYear.handler
    timeout: 30
    memorySize: 264
    package:
      patterns:
        - ! src/**/*
        - src/helpers/dynamodb.ts
        - src/getConcertsByYear.ts
    environment:
      CONCERTS_TABLE: ${self:custom.environment.CONCERTS_TABLE}
    events:
      - http:
         path: /concerts/{year}
         method: get
         cors: true 
  validateTicket:
    name: ${self:custom.base}-validateTicket
    description: 'Retrieves a concert by Year'
    handler: src/handlers/validateTicket.handler
    timeout: 30
    memorySize: 264
    package:
      patterns:
        - ! src/**/*
        - src/helpers/dynamodb.ts
        - src/validateTicket.ts
    environment:
      TICKETS_TABLE: ${self:custom.environment.TICKETS_TABLE}
    events:
      - http:
         path: /validateTicket
         method: post
         cors: true 
  getTicketById:
    name: ${self:custom.base}-getTicketById
    description: 'Retrieves a ticket by ID'
    handler: src/handlers/getTicketById.handler
    timeout: 30
    memorySize: 264
    package:
      patterns:
        - ! src/**/*
        - src/helpers/dynamodb.ts
        - src/getTicketById.ts
    environment:
      TICKETS_TABLE: ${self:custom.environment.TICKETS_TABLE}
    events:
      - http:
         path: /ticket/{id}
         method: get
         cors: true
  ticketTransaction:
    name: ${self:custom.base}-ticketTransaction
    description: 'Transacts a ticket'
    handler: src/handlers/ticketTransaction.handler
    timeout: 30
    memorySize: 264
    package:
      patterns:
        - ! src/**/*
        - src/helpers/dynamodb.ts
        - src/ticketTransaction.ts
    environment:
      TICKETS_TABLE: ${self:custom.environment.TICKETS_TABLE}
      DATA_BUCKET: ${self:custom.environment.DATA_BUCKET}
    events:
      - http:
         path: /ticketTransaction
         method: post
         cors: true
  